import asyncio
import logging
import requests
import nest_asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

nest_asyncio.apply()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–∞ API –∫–ª—é—á
TOKEN = '7540012321:AAEq6OkqrlEEEZEEtY6_E4_GlcOMgJq3w8k'
NEWS_API_KEY = '92d5b5293bea437281d886c00ffbf842'

# –°–ø–∏—Å–æ–∫ –¥–ª—è –≥—Ä–∏
game_statements = [
    {
        "text": "–ì–µ–Ω–µ—Ä–∞–ª–∏ –≤ –£–∫—Ä–∞—ó–Ω—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤ –æ–∫–æ–ø–∞—Ö. –ì–µ–Ω–µ—Ä–∞–ª, —è–∫–∏–π –Ω–µ –±—É–≤ –≤ –æ–∫–æ–ø—ñ, –¥–ª—è –º–µ–Ω–µ ‚Äî –ù–ï –≥–µ–Ω–µ—Ä–∞–ª",
        "is_true": True
    },
    {
        "text": "–ú–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—è: –í–∞–ª–µ—Ä—ñ–π –ó–∞–ª—É–∂–Ω–∏–π —É –ë—Ä–∏—Ç–∞–Ω—ñ—ó ¬´–ø–æ—Ä–∞–¥–∏–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –≤—ñ–π—Å—å–∫–æ–≤–∏–º –Ω–µ –±–æ—è—Ç–∏—Å—è —Å–º–µ—Ä—Ç—ñ, –±–æ —à–∞–Ω—Å—ñ–≤ –Ω–∞ –≤–∏–∂–∏–≤–∞–Ω–Ω—è —É –Ω–∏—Ö –≤—Å–µ –æ–¥–Ω–æ –Ω–µ–º–∞—î)",
        "is_true": False
    }
]

# –°–ø–∏—Å–æ–∫ —ñ—Å—Ç–∏–Ω–Ω–∏—Ö —Ç–≤–µ—Ä–¥–∂–µ–Ω—å
truth_sentences = [
    "—á–æ–ª–æ–≤—ñ–∫, —è–∫–∏–π –ø—Ä–∞—Ü—é–≤–∞–≤ –Ω–∞ –∑—Å —Ä—Ñ –ø—ñ–¥ —á–∞—Å –æ–∫—É–ø–∞—Ü—ñ—ó –ø—Ä–∞–≤–æ–±–µ—Ä–µ–∂–∂—è —Ö–µ—Ä—Å–æ–Ω—â–∏–Ω–∏, –ø—ñ—Å–ª—è –¥–µ–æ–∫—É–ø–∞—Ü—ñ—ó –ø—ñ—à–æ–≤ —É —Ç—Ü–∫ –æ–¥–µ—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ, ‚Äî –≥–±—Ä",
    "—á–∏–Ω–æ–≤–Ω–∏—Ü—è –ª—å–≤—ñ–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å–Ω–æ—ó –º—Å–µ–∫ –≤–∏—è–≤–∏–ª–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π –º—ñ–ª—å–π–æ–Ω–Ω–∏–π —Å—Ç–∞–Ω, ‚Äî –≥–±—Ä"
]

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
ASK_TEXT = 1
ASK_NEWS_QUERY = 2
ASK_RATING = 3
ASK_GAME = 4  # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω –¥–ª—è –≥—Ä–∏

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [KeyboardButton("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–∫—Ç—ñ–≤"), KeyboardButton("üì∞ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω")],
        [KeyboardButton("üìö –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"), KeyboardButton("üõ°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")],
        [KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"), KeyboardButton("‚≠êÔ∏è –û—Ü—ñ–Ω–∏—Ç–∏ –±–æ—Ç–∞")],
        [KeyboardButton("üéÆ –ì—Ä–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–¥—ñ—é –¥–µ–∑—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"), KeyboardButton("üîó –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
def get_back_to_menu_button():
    keyboard = [[KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∏ –æ—Ü—ñ–Ω–∫–∏
def get_rating_buttons():
    keyboard = [
        [KeyboardButton("1"), KeyboardButton("2"), KeyboardButton("3")],
        [KeyboardButton("4"), KeyboardButton("5")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∏ –≥—Ä–∏
def get_game_buttons():
    keyboard = [
        [KeyboardButton("–ü—Ä–∞–≤–¥–∞"), KeyboardButton("–§–µ–π–∫")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–∞—Ä—Ç—É
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        'üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–∞–∫—Ç—ñ–≤. –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:',
        reply_markup=get_main_menu()
    )

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text.strip()

    if text == "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–∫—Ç—ñ–≤":
        await update.message.reply_text("üìù –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–∞–∫—Ç—ñ–≤:", reply_markup=get_back_to_menu_button())
        context.user_data['state'] = ASK_TEXT
    elif text == "üì∞ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω":
        await update.message.reply_text("üîç –í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É –Ω–æ–≤–∏–Ω:", reply_markup=get_back_to_menu_button())
        context.user_data['state'] = ASK_NEWS_QUERY
    elif text == "üìö –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó":
        await show_instructions(update)
    elif text == "üõ°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó":
        await show_recommendations(update)
    elif text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞":
        await update.message.reply_text(
            "*–¶–µ–π –±–æ—Ç –¥–æ–∑–≤–æ–ª—è—î –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —Ñ–∞–∫—Ç–∏.*\n\n"
            "_–ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –ø—Ä–∞–≤–¥–∏–≤—ñ—Å—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç–∞ –Ω–µ –¥—ñ–ª—ñ—Ç—å—Å—è —Ñ–µ–π–∫–∞–º–∏!_",
            reply_markup=get_back_to_menu_button(),
            parse_mode="Markdown"
        )
    elif text == "‚≠êÔ∏è –û—Ü—ñ–Ω–∏—Ç–∏ –±–æ—Ç–∞":
        await update.message.reply_text("‚≠êÔ∏è –û—Ü—ñ–Ω—ñ—Ç—å –±–æ—Ç–∞ –≤—ñ–¥ 1 –¥–æ 5", reply_markup=get_rating_buttons())
        context.user_data['state'] = ASK_RATING
    elif text == "üéÆ –ì—Ä–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–¥—ñ—é –¥–µ–∑—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó":
        await start_game(update, context)
    elif text == "üîó –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏":
        await update.message.reply_text(
            "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏: [Telegram](https://t.me/+a66JcCA4uRQ3NjRi)",
            parse_mode="Markdown", reply_markup=get_back_to_menu_button()
        )
    elif text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é":
        await clear_chat(update, context)
    else:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –≥—Ä–∏
        user_state = context.user_data.get('state')
        if user_state == ASK_GAME:
            await process_game_answer(update, context)
        else:
            await process_user_input(update, context)

# –°—Ç–∞—Ä—Ç –≥—Ä–∏ –Ω–∞ –ø—Ä–æ—Ç–∏–¥—ñ—é –¥–µ–∑—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['state'] = ASK_GAME  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≥—Ä–∏
    context.user_data['game_index'] = 0  # –Ü–Ω–¥–µ–∫—Å –ø–æ—Ç–æ—á–Ω–æ—ó –≥—Ä–∏
    await show_next_game_statement(update, context)

# –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ —Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤ –≥—Ä—ñ
async def show_next_game_statement(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    game_index = context.user_data.get('game_index', 0)
    if game_index < len(game_statements):
        statement = game_statements[game_index]['text']
        await update.message.reply_text(
            f"ü§î –ß–∏ —Ü–µ –ø—Ä–∞–≤–¥–∞ —á–∏ —Ñ–µ–π–∫?\n\n{statement}",
            reply_markup=get_game_buttons()
        )
    else:
        # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏ —ñ –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        await update.message.reply_text(
            "üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≥—Ä—É. –ú–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é.",
            reply_markup=get_back_to_menu_button()
        )

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥—Ä—ñ
async def process_game_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_answer = update.message.text.strip()
    game_index = context.user_data.get('game_index', 0)
    statement = game_statements[game_index]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if (user_answer == "–ü—Ä–∞–≤–¥–∞" and statement['is_true']) or (user_answer == "–§–µ–π–∫" and not statement['is_true']):
        await update.message.reply_text("‚úÖ –ú–æ–ª–æ–¥–µ—Ü—å! –í–∏ –≤–≥–∞–¥–∞–ª–∏.")
    else:
        await update.message.reply_text(
            f"‚ùå –í–∏ –Ω–µ –≤–≥–∞–¥–∞–ª–∏. –¶–µ –±—É–ª–æ {'–ø—Ä–∞–≤–¥–∞' if statement['is_true'] else '—Ñ–µ–π–∫'}.",
        )

    # –ó–±—ñ–ª—å—à—É—î–º–æ —ñ–Ω–¥–µ–∫—Å —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ —Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    context.user_data['game_index'] += 1
    await show_next_game_statement(update, context)

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def process_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_state = context.user_data.get('state')
    if user_state == ASK_TEXT:
        user_text = update.message.text.strip()
        if user_text in truth_sentences:
            await update.message.reply_text("‚úÖ *–¶–µ –ø—Ä–∞–≤–¥–∞!*", parse_mode="Markdown")
        else:
            await update.message.reply_text("‚ùå *–¶–µ —Ñ–µ–π–∫!*", parse_mode="Markdown")
    elif user_state == ASK_NEWS_QUERY:
        query = update.message.text.strip()
        await get_news(update, query)
    elif user_state == ASK_RATING:
        rating = update.message.text.strip()
        if rating.isdigit() and 1 <= int(rating) <= 5:
            await update.message.reply_text(f"–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É –æ—Ü—ñ–Ω–∫—É: {rating} –∑ 5!", parse_mode="Markdown")
            await update.message.reply_text("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é", reply_markup=get_back_to_menu_button())
        else:
            await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ *1* –¥–æ *5*.", parse_mode="Markdown")
    context.user_data['state'] = None

# –û—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É
async def clear_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    message_id = update.message.message_id
    for i in range(0, 10):  # –í–∏–¥–∞–ª—è—î–º–æ –¥–æ 10 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        try:
            await context.bot.delete_message(chat_id, message_id - i)
        except Exception:
            pass
    await start(update, context)

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π
async def show_instructions(update: Update) -> None:
    instructions = (
        "*üìö –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:*\n"
        "1. –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –¥–∂–µ—Ä–µ–ª–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.\n"
        "2. –ó–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ —Ñ–∞–∫—Ç–∞–º–∏, –ø–µ—Ä—à –Ω—ñ–∂ –¥—ñ–ª–∏—Ç–∏—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é.\n"
        "3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–∞–∫—Ç—ñ–≤."
    )
    await update.message.reply_text(instructions, reply_markup=get_back_to_menu_button(), parse_mode="Markdown")

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
async def show_recommendations(update: Update) -> None:
    recommendations = (
        "*üõ°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –ø—Ä–æ—Ç–∏–¥—ñ—ó –¥–µ–∑—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:*\n"
        "1. –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –¥–∂–µ—Ä–µ–ª–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.\n"
        "2. –ù–µ –¥—ñ–ª—ñ—Ç—å—Å—è –Ω–µ–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é.\n"
        "3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–∞–∫—Ç—á–µ–∫—ñ–Ω–≥–æ–≤—ñ —Ä–µ—Å—É—Ä—Å–∏."
    )
    await update.message.reply_text(recommendations, reply_markup=get_back_to_menu_button(), parse_mode="Markdown")

# –ü–æ—à—É–∫ –Ω–æ–≤–∏–Ω
async def get_news(update: Update, query: str) -> None:
    url = f'https://newsapi.org/v2/everything?q={query}&apiKey={NEWS_API_KEY}'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        articles = data.get("articles", [])
        if articles:
            for article in articles[:3]:
                title = article.get("title", "–ù–µ–º–∞—î –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                description = article.get("description", "–ù–µ–º–∞—î –æ–ø–∏—Å—É")
                url = article.get("url", "")
                await update.message.reply_text(
                    f"üìå *{title}*\n\n{description}\n\n[–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ]({url})", parse_mode="Markdown"
                )
        else:
            await update.message.reply_text("‚ùå –ù–æ–≤–∏–Ω–∏ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.", parse_mode="Markdown")
    else:
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω.", parse_mode="Markdown")
    await update.message.reply_text("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é", reply_markup=get_back_to_menu_button())

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main() -> None:
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == '__main__':
    main()
